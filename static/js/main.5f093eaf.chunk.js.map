{"version":3,"sources":["components/QuizQuestion/index.js","App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","this","props","question","answers","map","v","type","value","text","className","onClick","nextQuestion","React","Component","TitlePage","state","score","titleText","counter","currentState","currentQuestion","timeLimit","correct","console","log","setState","questions","length","clearInterval","timer","setInterval","countdown","id","start","possibleAnswers","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ggCAkBeA,G,uLAfH,IAAD,OACP,OACE,oCACA,4BAAKC,KAAKC,MAAMC,UACfF,KAAKC,MAAME,QAAQC,KAAI,SAACC,GACvB,OAAO,2BAAOC,KAAK,SACnBC,MAAOF,EAAEG,KACTC,UAAU,eACVC,QAAS,kBAAM,EAAKT,MAAMU,0B,GATPC,IAAMC,Y,OCQ3BC,E,YACJ,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KACDc,MAAQ,CACXC,MAAO,EACPC,UAAW,2BACXC,QAAS,EACTC,aAZc,EAadC,gBAAiB,GAEnB,EAAKC,UAbU,EAIE,E,0EAWNC,GACXC,QAAQC,IAAI,kBACTF,GACDtB,KAAKyB,SAAS,CAACT,MAAOhB,KAAKe,MAAMC,MAAM,IAEtChB,KAAKe,MAAMK,kBAAoBM,EAAUC,OAAS,EACnDJ,QAAQC,IAAI,SAEZI,cAAc5B,KAAK6B,OACnBN,QAAQC,IAAIxB,KAAKe,MAAMK,iBACvBpB,KAAKyB,SAAS,CACZR,UAAU,iBACVE,aA5Be,EA6BfC,gBAAiBpB,KAAKe,MAAMK,gBAAkB,O,kCAIvC,IAAD,OACRG,QAAQC,IAAI,mBACZD,QAAQC,IAAIxB,KAAKe,MAAMG,SACpBlB,KAAKe,MAAMG,QAAUlB,KAAKqB,UAC3BrB,KAAKyB,SAAS,CAACR,UAAU,oBACzBC,QAASlB,KAAKe,MAAMG,QAAU,KAG9BlB,KAAKyB,SAAS,CAACR,UAAU,kBACzBE,aA1Ce,EA2CfD,QAAS,IA5CG,IA8CTlB,KAAKe,MAAMI,cACZnB,KAAK6B,MAAQC,aAAY,kBAAM,EAAKC,cAAa,KACjDH,cAAc5B,KAAK6B,QAEnB7B,KAAKyB,SAAS,CAACR,UAAU,qB,8BAIxB,IAAD,OACNM,QAAQC,IAAI,aACZxB,KAAKyB,SAAS,CAACR,UAAW,qBAAsBC,QAAQ,IACxDlB,KAAK6B,MAAQC,aAAY,kBAAM,EAAKC,cAAa,O,+BAEzC,IAAD,OACP,OACE,oCACA,yBAAKtB,UAAU,OACb,2BAAIT,KAAKqB,UAAYrB,KAAKe,MAAMG,SA/DpB,IAgETlB,KAAKe,MAAMI,aACd,oCACA,4BAAKnB,KAAKe,MAAME,WAChB,2BAAOe,GAAG,cAAc1B,KAAK,SAASC,MAAM,QAAQG,QAAS,kBAAI,EAAKuB,YAItE,kBAAC,EAAD,CAAc9B,QAASuB,EAAU,GAAGQ,gBAAiBhC,SACpDwB,EAAU,GAAGxB,SAAUS,aAAc,SAACW,GAAD,OAAa,EAAKX,kBAExD,qCAAWX,KAAKe,MAAMC,a,GArENJ,IAAMC,WAkFfsB,MARf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,QC3Ec2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.5f093eaf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass QuizQuestion extends React.Component {\r\n  render() {\r\n    return(\r\n      <>\r\n      <h2>{this.props.question}</h2>\r\n      {this.props.answers.map((v) => {\r\n        return <input type=\"button\"\r\n        value={v.text}\r\n        className=\"answerButton\"\r\n        onClick={() => this.props.nextQuestion()}></input>\r\n      })}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuizQuestion;","import React from 'react';\nimport './App.css';\nimport QuizQuestion from './components/QuizQuestion';\nimport questions from './questions.json';\n\nconst TITLE_STATE = 0\nconst QUESTION_STATE = 1\nconst TIME_LIMIT = 5\nconst FINAL_STATE = 2\n\nclass TitlePage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      score: 0,\n      titleText: \"Welcome to the Rat Quiz!\",\n      counter: 0,\n      currentState: TITLE_STATE,\n      currentQuestion: 0\n    }\n    this.timeLimit = TIME_LIMIT\n  }\n  nextQuestion(correct) {\n    console.log(\"BUTTON PRESSED\")\n    if(correct) {\n      this.setState({score: this.state.score+1})\n    }\n    if(this.state.currentQuestion === questions.length - 1) {\n      console.log(\"DONE\")\n    } else {\n      clearInterval(this.timer)\n      console.log(this.state.currentQuestion)\n      this.setState({\n        titleText:\"You answered x\",\n        currentState: QUESTION_STATE,\n        currentQuestion: this.state.currentQuestion + 1\n      })\n    }\n  }\n  countdown() {\n      console.log(\"INTERVAL CALLED\")\n      console.log(this.state.counter)\n      if(this.state.counter < this.timeLimit) {\n        this.setState({titleText:'Starting the quiz',\n        counter: this.state.counter + 1\n        })\n      } else {\n        this.setState({titleText:\"Beginning quiz!\",\n        currentState: QUESTION_STATE,\n        counter: 0\n        })\n        if(this.state.currentState === TITLE_STATE) {\n          this.timer = setInterval(() => this.countdown(), 1000)\n          clearInterval(this.timer)\n        } else {\n          this.setState({titleText:\"You answered!\"})\n        }\n    }\n  }\n  start() {\n    console.log(\"Starting!\")\n    this.setState({titleText: \"Starting the quiz!\", counter:0})\n    this.timer = setInterval(() => this.countdown(), 1000)\n  }\n  render() {\n    return (\n      <>\n      <div className='App'>\n        <p>{this.timeLimit - this.state.counter}</p>\n        {((this.state.currentState === TITLE_STATE) ?\n        <>\n        <h2>{this.state.titleText}</h2>\n        <input id=\"startButton\" type=\"button\" value=\"start\" onClick={()=>this.start()}\n        />\n        </>\n        :\n        <QuizQuestion answers={questions[0].possibleAnswers} question=\n        {questions[0].question} nextQuestion={(correct) => this.nextQuestion()}\n        ></QuizQuestion>)}\n        <p>Score: {this.state.score}</p>\n      </div>\n      </>)\n  }\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TitlePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}